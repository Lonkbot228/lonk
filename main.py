import os
import datetime
import io
import re
import openpyxl
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackContext

# Google Drive API
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload

# ID –ø–∞–ø–∫–∏ Google Drive
DRIVE_FOLDER_ID = "1kUYiSAafghhYR0ARyXwPW1HZPpHcFIag"

# –ü—É—Ç—å –∫ JSON —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è Google API
SERVICE_ACCOUNT_FILE = "path/to/your-service-account.json"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Drive API
SCOPES = ["https://www.googleapis.com/auth/drive.readonly"]
credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES
)
drive_service = build("drive", "v3", credentials=credentials)


async def find_file_id_by_date(target_date: datetime.date) -> str:
    """–ò—â–µ—Ç —Ñ–∞–π–ª –≤ Google Drive –ø–æ –¥–∞—Ç–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_id, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω."""
    file_name = target_date.strftime("%d.%m.%Y") + ".xlsx"
    query = f"'{DRIVE_FOLDER_ID}' in parents and name = '{file_name}' and mimeType != 'application/vnd.google-apps.folder'"
    results = drive_service.files().list(q=query, fields="files(id, name)").execute()
    files = results.get("files", [])
    return files[0]["id"] if files else None


async def download_file(file_id: str) -> bytes:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Google Drive –ø–æ file_id –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ."""
    request = drive_service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        _, done = downloader.next_chunk()
    fh.seek(0)
    return fh.read()


async def find_target_file() -> tuple[bytes, datetime.date] | tuple[None, None]:
    """–ò—â–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: —Å–µ–≥–æ–¥–Ω—è ‚Üí –∑–∞–≤—Ç—Ä–∞ ‚Üí –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ‚Üí –≤—á–µ—Ä–∞."""
    today = datetime.date.today()

    # 1. –°–µ–≥–æ–¥–Ω—è
    file_id = await find_file_id_by_date(today)
    if file_id:
        return await download_file(file_id), today

    # 2. –ó–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
    for delta in (1, 2):
        target_date = today + datetime.timedelta(days=delta)
        file_id = await find_file_id_by_date(target_date)
        if file_id:
            return await download_file(file_id), target_date

    # 3. –í—á–µ—Ä–∞
    target_date = today - datetime.timedelta(days=1)
    file_id = await find_file_id_by_date(target_date)
    if file_id:
        return await download_file(file_id), target_date

    return None, None


async def parse_schedule(file_bytes: bytes) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ Excel: –∏—â–µ—Ç '–°–ê-17' –∏ –±–µ—Ä–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ + –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    schedule_lines = []
    wb = openpyxl.load_workbook(filename=io.BytesIO(file_bytes), data_only=True)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ª–∏—Å—Ç–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É –ø–∞—Ä
    sheet_names = [s for s in wb.sheetnames if re.match(r"–ü–∞—Ä–∞\s*\d+", s)]
    sheet_names.sort(key=lambda s: int(re.search(r"\d+", s).group()))

    for sheet_name in sheet_names:
        ws = wb[sheet_name]
        room, teacher = None, None

        for row in ws.iter_rows(values_only=True):
            if row and any(isinstance(cell, str) and "–°–ê-17" in cell for cell in row if cell):
                room = row[0] if row[0] else "N/A"  # –ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞
                teacher = row[2] if len(row) >= 3 and row[2] else "N/A"  # –ò–º—è —É—á–∏—Ç–µ–ª—è
                break

        if room or teacher:
            schedule_lines.append(f"üìé{sheet_name}")
            schedule_lines.append(f"üîë{room}")
            schedule_lines.append(f"‚úçÔ∏è{teacher}\n")

    return "\n".join(schedule_lines) if schedule_lines else "‚õî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."


async def schedule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule."""
    file_bytes, file_date = await find_target_file()
    if not file_bytes:
        await update.message.reply_text("‚õî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏.")
        return

    schedule_text = await parse_schedule(file_bytes)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: "üóìÔ∏è2 –∞–ø—Ä–µ–ª—è")
    months = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    header_date = f"üóìÔ∏è{file_date.day} {months[file_date.month]}"
    message = f"*{header_date}*\n\n{schedule_text}"

    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    token = os.environ.get("TOKEN")
    application = Application.builder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /schedule
    application.add_handler(CommandHandler("schedule", schedule_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()