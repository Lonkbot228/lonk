import os
import re
import logging
import datetime
from io import BytesIO

import requests
from bs4 import BeautifulSoup
from openpyxl import load_workbook
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# URL –ø—É–±–ª–∏—á–Ω–æ–π –ø–∞–ø–∫–∏ Google –î–∏—Å–∫–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É)
PUBLIC_FOLDER_URL = "https://drive.google.com/drive/folders/1kUYiSAafghhYR0ARyXwPW1HZPpHcFIag""

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤–∏–¥–∞ DD.MM.YYYY.xlsx
FILENAME_REGEX = re.compile(r'(\d{2}\.\d{2}\.\d{4}\.xlsx)')

def get_candidate_dates():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞."""
    today = datetime.date.today()
    # 1. –°–µ–≥–æ–¥–Ω—è
    dates = [today]
    # 2. –ó–∞–≤—Ç—Ä–∞ –∏ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
    tomorrow = today + datetime.timedelta(days=1)
    day_after = today + datetime.timedelta(days=2)
    dates.extend([tomorrow, day_after])
    # 3. –í—á–µ—Ä–∞
    yesterday = today - datetime.timedelta(days=1)
    dates.append(yesterday)
    return dates

def format_date_for_filename(date_obj: datetime.date) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É DD.MM.YYYY.xlsx"""
    return date_obj.strftime("%d.%m.%Y") + ".xlsx"

def fetch_folder_page():
    """–ü–æ–ª—É—á–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—É–±–ª–∏—á–Ω–æ–π –ø–∞–ø–∫–∏ Google –î–∏—Å–∫–∞."""
    try:
        response = requests.get(PUBLIC_FOLDER_URL)
        response.raise_for_status()
        return response.text
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–ø–∫–∏: %s", e)
        return None

def parse_files_from_folder(html_text):
    """
    –ò–∑ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {–∏–º—è_—Ñ–∞–π–ª–∞: (file_id, download_url)}.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —à–∞–±–ª–æ–Ω /file/d/FILE_ID/view
    –∏ –≥–¥–µ-—Ç–æ —Ä—è–¥–æ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞.
    """
    files = {}
    soup = BeautifulSoup(html_text, "lxml")
    # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è /file/d/
    for a in soup.find_all("a", href=True):
        href = a["href"]
        match = re.search(r'/file/d/([a-zA-Z0-9_-]+)/', href)
        if match:
            file_id = match.group(1)
            text = a.get_text(strip=True)
            # –ò—â–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
            fname_match = FILENAME_REGEX.search(text)
            if fname_match:
                file_name = fname_match.group(1)
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                download_url = f"https://drive.google.com/uc?export=download&id={file_id}"
                files[file_name] = (file_id, download_url)
    return files

def find_schedule_file():
    """
    –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É:
      1. –ò—â–µ–º —Ñ–∞–π–ª –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
      2. –ï—Å–ª–∏ –Ω–µ—Ç, –∏—â–µ–º –∑–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –∏–ª–∏ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.
      3. –ï—Å–ª–∏ –Ω–µ—Ç, –∏—â–µ–º –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (–∏–º—è_—Ñ–∞–π–ª–∞, download_url) –∏–ª–∏ (None, None).
    """
    html_text = fetch_folder_page()
    if not html_text:
        return None, None

    files = parse_files_from_folder(html_text)
    candidate_dates = get_candidate_dates()
    for date_obj in candidate_dates:
        fname = format_date_for_filename(date_obj)
        if fname in files:
            _, download_url = files[fname]
            logger.info("–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: %s", fname)
            return fname, download_url
    logger.info("–§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –¥–∞—Ç–∞–º.")
    return None, None

def download_file(download_url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –≤–∏–¥–µ BytesIO."""
    try:
        response = requests.get(download_url)
        response.raise_for_status()
        return BytesIO(response.content)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: %s", e)
        return None

def extract_schedule_from_workbook(wb):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–∏–≥—É .xlsx.
    –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–ü–∞—Ä–∞",
    –∏—â–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è "–°–ê-17". –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ:
      - –ï—Å–ª–∏ –≤–æ 2-–º —Å—Ç–æ–ª–±—Ü–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è "–°–ê-17", –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ 1-–≥–æ –∏ 3-–≥–æ —Å—Ç–æ–ª–±—Ü–æ–≤.
      - –ï—Å–ª–∏ –≤ 5-–º —Å—Ç–æ–ª–±—Ü–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è "–°–ê-17", –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ 4-–≥–æ –∏ 6-–≥–æ —Å—Ç–æ–ª–±—Ü–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞:
       { sheet_title: {"room": –∑–Ω–∞—á–µ–Ω–∏–µ, "teacher": –∑–Ω–∞—á–µ–Ω–∏–µ} }
    """
    schedule = {}
    for sheet_name in wb.sheetnames:
        if not sheet_name.startswith("–ü–∞—Ä–∞"):
            continue
        ws = wb[sheet_name]
        room = None
        teacher = None
        for row in ws.iter_rows(values_only=True):
            if row is None or len(row) < 6:
                continue
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "–°–ê-17" –≤ 2-–º —Å—Ç–æ–ª–±—Ü–µ (–∏–Ω–¥–µ–∫—Å 1)
            if row[1] is not None and "–°–ê-17" in str(row[1]):
                part1 = str(row[0]).strip() if row[0] is not None else ""
                part2 = str(row[2]).strip() if row[2] is not None else ""
                room = (part1 + part2).strip()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "–°–ê-17" –≤ 5-–º —Å—Ç–æ–ª–±—Ü–µ (–∏–Ω–¥–µ–∫—Å 4)
            if row[4] is not None and "–°–ê-17" in str(row[4]):
                part1 = str(row[3]).strip() if row[3] is not None else ""
                part2 = str(row[5]).strip() if row[5] is not None else ""
                teacher = " ".join(filter(None, [part1, part2])).strip()
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π, –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫ –≤ —ç—Ç–æ–º –ª–∏—Å—Ç–µ
            if room or teacher:
                break
        if room or teacher:
            schedule[sheet_name] = {"room": room, "teacher": teacher}
    return schedule

def format_schedule_message(schedule_data, file_date: datetime.date):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É:
    
    üóìÔ∏è **2 –∞–ø—Ä–µ–ª—è**  

    üìé **–ü–∞—Ä–∞ 1**  
    üîë 103  
    ‚úçÔ∏è –°—Ç–∞—Ä—ã—Ö –û.–ê.  
    """
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, "2 –∞–ø—Ä–µ–ª—è"
    day = file_date.day
    month = file_date.strftime("%B")  # –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º; –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∑–∞–º–µ–Ω–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–µ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    months_ru = {
        "January": "—è–Ω–≤–∞—Ä—è", "February": "—Ñ–µ–≤—Ä–∞–ª—è", "March": "–º–∞—Ä—Ç–∞",
        "April": "–∞–ø—Ä–µ–ª—è", "May": "–º–∞—è", "June": "–∏—é–Ω—è",
        "July": "–∏—é–ª—è", "August": "–∞–≤–≥—É—Å—Ç–∞", "September": "—Å–µ–Ω—Ç—è–±—Ä—è",
        "October": "–æ–∫—Ç—è–±—Ä—è", "November": "–Ω–æ—è–±—Ä—è", "December": "–¥–µ–∫–∞–±—Ä—è"
    }
    month_ru = months_ru.get(month, month)
    message_lines = [f"üóìÔ∏è **{day} {month_ru}**", ""]
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞ ("–ü–∞—Ä–∞ X")
    for sheet, data in schedule_data.items():
        message_lines.append(f"üìé **{sheet}**")
        if data.get("room"):
            message_lines.append(f"üîë {data['room']}")
        if data.get("teacher"):
            message_lines.append(f"‚úçÔ∏è {data['teacher']}")
        message_lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
    return "\n".join(message_lines)

async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule."""
    # –ò—â–µ–º —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    fname, download_url = find_schedule_file()
    if not fname or not download_url:
        await update.message.reply_text("–§–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É —Ñ–∞–π–ª–∞ –∏–∑ –∏–º–µ–Ω–∏ (—Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY.xlsx)
    try:
        file_date = datetime.datetime.strptime(fname[:-5], "%d.%m.%Y").date()
    except Exception as e:
        file_date = datetime.date.today()

    file_stream = download_file(download_url)
    if not file_stream:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.")
        return

    try:
        wb = load_workbook(filename=file_stream, data_only=True)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.")
        return

    schedule_data = extract_schedule_from_workbook(wb)
    if not schedule_data:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –°–ê-17.")
        return

    message = format_schedule_message(schedule_data, file_date)
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /schedule –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."
    await update.message.reply_text(welcome_text)

def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TOKEN")
    if not token:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("schedule", schedule_command))

    application.run_polling()

if __name__ == '__main__':
    main()
