import os
from icalendar import Calendar
import time
from telegram import Update
from telegram.ext import Application, CommandHandler
import datetime
import re
from babel.dates import format_date

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ iCalendar
def read_ics_file():
    try:
        with open("sa17.ics", "r", encoding="utf-8") as file:
            calendar = Calendar.from_ical(file.read())
        return calendar
    except FileNotFoundError:
        print("–§–∞–π–ª sa17.ics –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
def format_date_russian(date):
    return format_date(date, format="d MMMM, EEEE", locale="ru")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏
def extract_data(text, key):
    match = re.search(fr"{key}:\s*(.+?)\s*\|", text)
    return match.group(1).strip() if match else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ summary
def extract_subject(summary):
    match = re.search(r"/(.*?)/", summary)
    return match.group(1).strip() if match else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ iCalendar
def get_schedule_from_ics(calendar, target_date):
    schedule = []
    for component in calendar.walk():
        if component.name == "VEVENT":
            event_start = component.get("DTSTART").dt.date()
            if event_start == target_date:
                summary = component.get("SUMMARY", "")
                description = component.get("DESCRIPTION", "")
                subject = extract_subject(summary)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                time = extract_data(description, "–í—Ä–µ–º—è")
                room = extract_data(description, "–ö–∞–±–∏–Ω–µ—Ç")
                teacher = extract_data(description, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")

                schedule.append({
                    "subject": subject,
                    "time": time,
                    "room": room,
                    "teacher": teacher,
                })
    return sorted(schedule, key=lambda x: x["time"])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_combined_schedule(target_date):
    calendar = read_ics_file()
    ics_schedule = []
    if calendar:
        ics_schedule = get_schedule_from_ics(calendar, target_date)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    formatted_schedule = format_schedule(ics_schedule, target_date)
    return formatted_schedule

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_schedule(ics_schedule, target_date):
    formatted_schedule = f"üìÖ <b>{format_date_russian(target_date)}</b>\n\n"
   ¬†
    if not ics_schedule:
        formatted_schedule += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å."
    else:
        for event in ics_schedule:
            subject = event.get("subject", "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω")
            formatted_schedule += (
                f"üïí <b>{event['time']}</b>\n"  # –í—Ä–µ–º—è –ø–∞—Ä—ã
                f"üìò {subject}\n"              # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ (–Ω–µ –∂–∏—Ä–Ω—ã–º)
                f"‚úçÔ∏è {event['teacher']}\n"     # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
                f"üè´ {event['room']}\n\n"      # –ö–∞–±–∏–Ω–µ—Ç
            )

    return formatted_schedule

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –≤ Telegram
async def start(update: Update, context):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –°–ê-17.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /schedule –≤ Telegram
async def schedule(update: Update, context):
    try:
        target_date = datetime.date.today()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        formatted_data = format_combined_schedule(target_date)
        await update.message.reply_text(formatted_data, parse_mode="HTML")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /nikas –≤ Telegram
async def nikas(update: Update, context):
    await update.message.reply_text('<b>–ø–æ—à–µ–ª –Ω–∞—Ö—É–π</b>', parse_mode="HTML")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
def main():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TOKEN")
    application = Application.builder().token(token).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("schedule", schedule))
    application.add_handler(CommandHandler("nikas", nikas))  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /nikas

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
