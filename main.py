import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from icalendar import Calendar
import time
from telegram import Update
from telegram.ext import Application, CommandHandler
import datetime
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium
options = webdriver.ChromeOptions()
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-gpu')
options.add_argument('--disable-software-rasterizer')

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ iCalendar (sa17.ics)
def read_ics_file():
    try:
        with open("sa17.ics", "r", encoding="utf-8") as file:
            calendar = Calendar.from_ical(file.read())
        return calendar
    except FileNotFoundError:
        print("–§–∞–π–ª sa17.ics –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞.")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ iCalendar
def get_schedule_from_ics(calendar, target_date):
    schedule = []
    for component in calendar.walk():
        if component.name == "VEVENT":
            event_start = component.get("DTSTART").dt
            event_end = component.get("DTEND").dt
            summary = component.get("SUMMARY")
            location = component.get("LOCATION", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            description = component.get("DESCRIPTION", "")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫ —Ü–µ–ª–µ–≤–æ–º—É –¥–Ω—é
            if isinstance(event_start, datetime.datetime):
                event_start = event_start.date()
            if event_start == target_date:
                schedule.append({
                    "start_time": component.get("DTSTART").dt.strftime("%H:%M"),
                    "end_time": component.get("DTEND").dt.strftime("%H:%M"),
                    "summary": summary,
                    "location": location,
                    "description": description,
                })
    return schedule

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ Selenium
def get_schedule_from_web():
    driver.get('https://www.rksi.ru/mobile_schedule')
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'group')))
    group_select = driver.find_element(By.NAME, 'group')
    group_select.send_keys('–°–ê-17')
    submit_button = driver.find_element(By.NAME, 'stt')
    submit_button.click()
    time.sleep(3)
    schedule_data = driver.find_element(By.TAG_NAME, 'body').text
    start_index = schedule_data.find('_________________')
    if start_index != -1:
        schedule_data = schedule_data[start_index:]
    schedule_data = schedule_data.replace("_________________", "").replace("–ù–∞ —Å–∞–π—Ç", "")
    return schedule_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_schedule_from_ics(schedule, date):
    formatted_schedule = f"üìÖ <b>{date.strftime('%d %B, %A')}</b>\n\n"
    if not schedule:
        formatted_schedule += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã.\n"
    else:
        for event in schedule:
            formatted_schedule += (
                f"üïí <b>{event['start_time']} - {event['end_time']}</b>\n"
                f"üìö {event['summary']}\n"
                f"üè´ {event['location']}\n"
                f"‚úçÔ∏è {event['description']}\n\n"
            )
    return formatted_schedule

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_combined_schedule(target_date):
    calendar = read_ics_file()
    if calendar:
        ics_schedule = get_schedule_from_ics(calendar, target_date)
        if ics_schedule:
            return format_schedule_from_ics(ics_schedule, target_date)
    # –ï—Å–ª–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
    web_schedule = get_schedule_from_web()
    return format_schedule(web_schedule)

# –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ–±-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_schedule(data):
    formatted_schedule = ""
    lines = data.split('\n')  # –†–∞–∑–±–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    current_date = ""         # –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É

    for i, line in enumerate(lines):
        line = line.strip()
        if line == "":
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ "–∞—É–¥."
        if "–∞—É–¥." in line:
            if i >= 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π
                date_line = lines[i - 3].strip()  # –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
                time_line = lines[i - 2].strip()  # –°—Ç—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º
                subject_line = lines[i - 1].strip()  # –°—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–∞—Ä—ã
                audience_and_teacher = line.strip()  # –ê—É–¥–∏—Ç–æ—Ä–∏—è –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å

                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                if current_date != date_line:
                    current_date = date_line
                    formatted_schedule += f"\nüìÖ <b>{current_date}</b>\n\n"

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
                formatted_schedule += (
                    f"üïí <b>{time_line}</b>\n"
                    f"üìö {subject_line}\n"
                    f"üè´ {audience_and_teacher}\n\n"
                )

    return formatted_schedule

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –≤ Telegram
async def start(update: Update, context):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –°–ê-17.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /schedule –≤ Telegram
async def schedule(update: Update, context):
    try:
        target_date = datetime.date.today()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        formatted_data = format_combined_schedule(target_date)
        await update.message.reply_text(formatted_data, parse_mode="HTML")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
def main():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TOKEN")
    application = Application.builder().token(token).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("schedule", schedule))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()