import os
import datetime
import io
import re
import requests
import openpyxl
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackContext

# ID –ø—É–±–ª–∏—á–Ω–æ–π –ø–∞–ø–∫–∏ Google Drive
DRIVE_FOLDER_ID = "1kUYiSAafghhYR0ARyXwPW1HZPpHcFIag"


def get_file_id_from_folder(target_date: datetime.date) -> str | None:
    """–ò—â–µ—Ç —Ñ–∞–π–ª —Å –Ω—É–∂–Ω–æ–π –¥–∞—Ç–æ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤ –ø—É–±–ª–∏—á–Ω–æ–π –ø–∞–ø–∫–µ Google Drive."""
    session = requests.Session()
    
    # Google API –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ
    url = f"https://drive.google.com/drive/folders/{DRIVE_FOLDER_ID}?usp=sharing"
    response = session.get(url)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
    if response.status_code != 200:
        return None
    
    # –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "02.04.2025.xlsx")
    file_name = target_date.strftime("%d.%m.%Y") + ".xlsx"
    
    # –ò—â–µ–º file_id –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    match = re.search(rf'"([a-zA-Z0-9_-]+)"\s*,\s*\[\["{file_name}"', response.text)
    
    return match.group(1) if match else None


def download_public_file(file_id: str) -> bytes:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π —Ñ–∞–π–ª –∏–∑ Google Drive."""
    url = f"https://drive.google.com/uc?export=download&id={file_id}"
    response = requests.get(url, allow_redirects=True)
    response.raise_for_status()
    return response.content


async def find_target_file() -> tuple[bytes, datetime.date] | tuple[None, None]:
    """–ò—â–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: —Å–µ–≥–æ–¥–Ω—è ‚Üí –∑–∞–≤—Ç—Ä–∞ ‚Üí –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ‚Üí –≤—á–µ—Ä–∞."""
    today = datetime.date.today()

    # 1. –°–µ–≥–æ–¥–Ω—è
    file_id = get_file_id_from_folder(today)
    if file_id:
        return download_public_file(file_id), today

    # 2. –ó–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
    for delta in (1, 2):
        target_date = today + datetime.timedelta(days=delta)
        file_id = get_file_id_from_folder(target_date)
        if file_id:
            return download_public_file(file_id), target_date

    # 3. –í—á–µ—Ä–∞
    target_date = today - datetime.timedelta(days=1)
    file_id = get_file_id_from_folder(target_date)
    if file_id:
        return download_public_file(file_id), target_date

    return None, None


async def parse_schedule(file_bytes: bytes) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ Excel: –∏—â–µ—Ç '–°–ê-17' –∏ –±–µ—Ä–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ + –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è."""
    schedule_lines = []
    wb = openpyxl.load_workbook(filename=io.BytesIO(file_bytes), data_only=True)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ª–∏—Å—Ç–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É –ø–∞—Ä
    sheet_names = [s for s in wb.sheetnames if re.match(r"–ü–∞—Ä–∞\s*\d+", s)]
    sheet_names.sort(key=lambda s: int(re.search(r"\d+", s).group()))

    for sheet_name in sheet_names:
        ws = wb[sheet_name]
        room, teacher = None, None

        for row in ws.iter_rows(values_only=True):
            if row and any(isinstance(cell, str) and "–°–ê-17" in cell for cell in row if cell):
                room = row[0] if row[0] else "N/A"  # –ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞
                teacher = row[2] if len(row) >= 3 and row[2] else "N/A"  # –ò–º—è —É—á–∏—Ç–µ–ª—è
                break

        if room or teacher:
            schedule_lines.append(f"üìé{sheet_name}")
            schedule_lines.append(f"üîë{room}")
            schedule_lines.append(f"‚úçÔ∏è{teacher}\n")

    return "\n".join(schedule_lines) if schedule_lines else "‚õî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."


async def schedule_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule."""
    file_bytes, file_date = await find_target_file()
    if not file_bytes:
        await update.message.reply_text("‚õî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–Ω–∏.")
        return

    schedule_text = await parse_schedule(file_bytes)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: "üóìÔ∏è2 –∞–ø—Ä–µ–ª—è")
    months = {
        1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
        5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
        9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
    }
    header_date = f"üóìÔ∏è{file_date.day} {months[file_date.month]}"
    message = f"*{header_date}*\n\n{schedule_text}"

    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    token = os.environ.get("TOKEN")
    application = Application.builder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /schedule
    application.add_handler(CommandHandler("schedule", schedule_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()