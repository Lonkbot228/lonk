import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from icalendar import Calendar
import time
from telegram import Update
from telegram.ext import Application, CommandHandler
import datetime
import re
from babel.dates import format_date  # –î–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium
options = webdriver.ChromeOptions()
options.add_argument('--headless')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--disable-gpu')
options.add_argument('--disable-software-rasterizer')

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ iCalendar (sa17.ics)
def read_ics_file():
    try:
        with open("sa17.ics", "r", encoding="utf-8") as file:
            calendar = Calendar.from_ical(file.read())
        return calendar
    except FileNotFoundError:
        print("–§–∞–π–ª sa17.ics –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞.")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
def format_date_russian(date):
    return format_date(date, format="d MMMM, EEEE", locale="ru")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ iCalendar
def get_schedule_from_ics(calendar, target_date):
    schedule = []
    for component in calendar.walk():
        if component.name == "VEVENT":
            event_start = component.get("DTSTART").dt.date()
            if event_start == target_date:
                description = component.get("DESCRIPTION", "")
                time_match = re.search(r"–í—Ä–µ–º—è:\s*(\d{2}:\d{2})\s*‚Äî\s*(\d{2}:\d{2})", description)
                room_match = re.search(r"–ö–∞–±–∏–Ω–µ—Ç:\s*(.*?)\s*\|", description)
                teacher_match = re.search(r"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:\s*(.*?)\s*\|", description)

                if time_match:
                    start_time = time_match.group(1)
                    end_time = time_match.group(2)
                    schedule.append({
                        "time": f"{start_time} ‚Äî {end_time}",
                        "room": room_match.group(1).strip() if room_match else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                        "teacher": teacher_match.group(1).strip() if teacher_match else "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    })
    return schedule

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ Selenium
def get_schedule_from_web():
    driver.get('https://www.rksi.ru/mobile_schedule')
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, 'group')))
    group_select = driver.find_element(By.NAME, 'group')
    group_select.send_keys('–°–ê-17')
    submit_button = driver.find_element(By.NAME, 'stt')
    submit_button.click()
    time.sleep(3)
    schedule_data = driver.find_element(By.TAG_NAME, 'body').text
    start_index = schedule_data.find('_________________')
    if start_index != -1:
        schedule_data = schedule_data[start_index:]
    schedule_data = schedule_data.replace("_________________", "").replace("–ù–∞ —Å–∞–π—Ç", "")
    return schedule_data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_combined_schedule(target_date):
    calendar = read_ics_file()
    ics_schedule = []
    if calendar:
        ics_schedule = get_schedule_from_ics(calendar, target_date)

    web_schedule = get_schedule_from_web()
    formatted_schedule = format_schedule(web_schedule, ics_schedule, target_date)
    return formatted_schedule

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
def sort_schedule_by_time(events):
    return sorted(events, key=lambda x: datetime.datetime.strptime(x['time'].split(' ‚Äî ')[0], '%H:%M'))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_schedule(web_data, ics_schedule, target_date):
    formatted_schedule = f"üìÖ <b>{format_date_russian(target_date)}</b>\n\n"
    lines = web_data.split('\n')
    current_date = ""
    events = []

    # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –≤–µ–±-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    for i, line in enumerate(lines):
        line = line.strip()
        if "–∞—É–¥." in line:
            if i >= 3:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π
                time_line = lines[i - 2].strip()  # –í—Ä–µ–º—è
                subject_line = lines[i - 1].strip()  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã
                events.append({"time": time_line, "subject": subject_line})

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ics –∏ –≤–µ–±-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    for i, event in enumerate(events):
        if i < len(ics_schedule):
            event.update(ics_schedule[i])  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ics
        formatted_schedule += (
            f"üïí <b>{event['time']}</b>\n"
            f"üìö {event.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üè´ {event.get('room', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚úçÔ∏è {event.get('teacher', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        )

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    events_sorted = sort_schedule_by_time(events)
    
    # –ü–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    formatted_schedule = ""
    for event in events_sorted:
        formatted_schedule += (
            f"üïí <b>{event['time']}</b>\n"
            f"üìö {event.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üè´ {event.get('room', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚úçÔ∏è {event.get('teacher', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        )
    
    return formatted_schedule

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –≤ Telegram
async def start(update: Update, context):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –°–ê-17.')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /schedule –≤ Telegram
async def schedule(update: Update, context):
    try:
        target_date = datetime.date.today()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        formatted_data = format_combined_schedule(target_date)
        await update.message.reply_text(formatted_data, parse_mode="HTML")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
def main():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.environ.get("TOKEN")
    application = Application.builder().token(token).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("schedule", schedule))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
